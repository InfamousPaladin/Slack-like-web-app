============================= test session starts ==============================
platform linux -- Python 3.7.3, pytest-6.0.1, py-1.9.0, pluggy-0.13.1
rootdir: /tmp_amd/cage/export/cage/1/z5312886/cs1531/ass1/project, configfile: pytest.ini
plugins: hypothesis-5.24.3
collected 146 items

auth_test.py ............................                                [ 19%]
channel_test.py ................FF...sssssssssssssss.................... [ 57%]
..............                                                           [ 67%]
channels_test.py ...................                                     [ 80%]
echo_http_test.py E                                                      [ 80%]
echo_test.py ..                                                          [ 82%]
message_test.py ....FFF...................                               [100%]

==================================== ERRORS ====================================
_________________________ ERROR at setup of test_echo __________________________

    @pytest.fixture
    def url():
        url_re = re.compile(r' \* Running on ([^ ]*)')
        server = Popen(["python3", "src/server.py"], stderr=PIPE, stdout=PIPE)
        line = server.stderr.readline()
        local_url = url_re.match(line.decode())
        if local_url:
            yield local_url.group(1)
            # Terminate the server
            server.send_signal(signal.SIGINT)
            waited = 0
            while server.poll() is None and waited < 5:
                sleep(0.1)
                waited += 0.1
            if server.poll() is None:
                server.kill()
        else:
            server.kill()
>           raise Exception("Couldn't get URL from local server")
E           Exception: Couldn't get URL from local server

echo_http_test.py:30: Exception
=================================== FAILURES ===================================
______________________ test_input_messages_start_equal_1 _______________________

    def test_input_messages_start_equal_1():
        """Testing when start index is equal to the total number of messages, it will
        instead raise an InputError (assumption).
        """
        clear()
        user = auth.auth_register('johnsmith@gmail.com', 'password', 'John', 'Smith')
        new_channel = channels.channels_create(user['token'], 'Group 1', True)
        create_messages(user, new_channel, 0, 1)
        with pytest.raises(InputError):
>           channel.channel_messages(user['token'], new_channel['channel_id'], 1)
E           Failed: DID NOT RAISE <class 'error.InputError'>

channel_test.py:563: Failed
______________________ test_input_messages_start_equal_10 ______________________

    def test_input_messages_start_equal_10():
        """Testing when start index is equal to the total number of messages, it will
        instead raise an InputError (assumption).
        """
        clear()
        user = auth.auth_register('johnsmith@gmail.com', 'password', 'John', 'Smith')
        new_channel = channels.channels_create(user['token'], 'Group 1', True)
        create_messages(user, new_channel, 0, 10)
        with pytest.raises(InputError):
>           channel.channel_messages(user['token'], new_channel['channel_id'], 10)
E           Failed: DID NOT RAISE <class 'error.InputError'>

channel_test.py:575: Failed
_________________________ test_message_send_output_one _________________________

    def test_message_send_output_one():
        """
        Testing a normal case (Authorised user sends a message in a channel)
        """
        clear()
        user_1 = auth.auth_register('johnsmith@gmail.com', 'password', 'John', 'Smith')
        user_2 = auth.auth_register('janesmith@gmail.com', 'password', 'Jane', 'Smith')
        new_channel = channels.channels_create(user_1['token'], 'Group 1', True)
        channel.channel_join(user_2['token'], new_channel['channel_id'])
        message_str_one = "Welcome guys!"
        message_str_two = "Hello, I'm Jane!"
        message.message_send(user_1['token'], new_channel['channel_id'], message_str_one)
        message.message_send(user_2['token'], new_channel['channel_id'], message_str_two)
        message_list = channel.channel_messages(user_1['token'], new_channel['channel_id'], 0)
        message_count = 0
        for msg in message_list['messages']:
            message_count += 1
>           assert msg is message_str_one or msg is message_str_two
E           assert ({'message': 'Welcome guys!', 'message_id': 0, 'time_created': 1602621309.635293, 'u_id': 1} is 'Welcome guys!' or {'message': 'Welcome guys!', 'message_id': 0, 'time_created': 1602621309.635293, 'u_id': 1} is "Hello, I'm Jane!")

message_test.py:119: AssertionError
_________________________ test_message_send_output_two _________________________

    def test_message_send_output_two():
        """
        Testing a longer case (multiple authorised users sending messages in a channel)
        """
        clear()
        user_1 = auth.auth_register('johnsmith@gmail.com', 'password', 'John', 'Smith')
        user_2 = auth.auth_register('janesmith@gmail.com', 'password', 'Jane', 'Smith')
        user_3 = auth.auth_register('jonesmith@gmail.com', 'password', 'Jone', 'Smith')
        user_4 = auth.auth_register('jamesmith@gmail.com', 'password', 'Jame', 'Smith')
        new_channel = channels.channels_create(user_1['token'], 'Group 1', True)
        channel.channel_join(user_2['token'], new_channel['channel_id'])
        channel.channel_join(user_3['token'], new_channel['channel_id'])
        channel.channel_join(user_4['token'], new_channel['channel_id'])
        msg_str_1 = "Welcome guys!"
        msg_str_2 = "Hello, I'm Jane!"
        msg_str_3 = "sup"
        msg_str_4 = "Ok, let's start the project"
        msg_str_5 = "Join the call when you're ready guys"
        msg_str_6 = "sure, lemme get something to eat first"
        msg_str_7 = "Yeah aight, I'm joining."
        message.message_send(user_1['token'], new_channel['channel_id'], msg_str_1)
        message.message_send(user_2['token'], new_channel['channel_id'], msg_str_2)
        message.message_send(user_3['token'], new_channel['channel_id'], msg_str_3)
        message.message_send(user_4['token'], new_channel['channel_id'], msg_str_4)
        message.message_send(user_1['token'], new_channel['channel_id'], msg_str_5)
        message.message_send(user_2['token'], new_channel['channel_id'], msg_str_6)
        message.message_send(user_3['token'], new_channel['channel_id'], msg_str_7)
        message_list = channel.channel_messages(user_1['token'], new_channel['channel_id'], 0)
        message_count = 0
        message_confirmed = False
        for msg in message_list['messages']:
>           if msg in {msg_str_1, msg_str_2, msg_str_3, msg_str_4, msg_str_5, msg_str_6, msg_str_7}:
E           TypeError: unhashable type: 'dict'

message_test.py:154: TypeError
______________________ test_message_send_output_empty_str ______________________

    def test_message_send_output_empty_str():
        """
        Testing an empty string message (Authorised user sends a message in a channel)
        """
        clear()
        user_1 = auth.auth_register('johnsmith@gmail.com', 'password', 'John', 'Smith')
        user_2 = auth.auth_register('janesmith@gmail.com', 'password', 'Jane', 'Smith')
        new_channel = channels.channels_create(user_1['token'], 'Group 1', True)
        channel.channel_join(user_2['token'], new_channel['channel_id'])
        message_str = ""
        message.message_send(user_2['token'], new_channel['channel_id'], message_str)
        message_list = channel.channel_messages(user_1['token'], new_channel['channel_id'], 0)
        message_count = 0
        for msg in message_list['messages']:
            message_count += 1
>           assert msg is message_str
E           AssertionError: assert {'message': '', 'message_id': 0, 'time_created': 1602621309.703238, 'u_id': 2} is ''

message_test.py:176: AssertionError
=========================== short test summary info ============================
FAILED channel_test.py::test_input_messages_start_equal_1 - Failed: DID NOT R...
FAILED channel_test.py::test_input_messages_start_equal_10 - Failed: DID NOT ...
FAILED message_test.py::test_message_send_output_one - assert ({'message': 'W...
FAILED message_test.py::test_message_send_output_two - TypeError: unhashable ...
FAILED message_test.py::test_message_send_output_empty_str - AssertionError: ...
ERROR echo_http_test.py::test_echo - Exception: Couldn't get URL from local s...
============== 5 failed, 125 passed, 15 skipped, 1 error in 3.00s ==============
